- &common_play
  name: Setting up config files
  hosts: localhost
  connection: local
  environment:
    PATH: "~/NonRootSetup/env/homebrew/sbin:~/NonRootSetup/env/homebrew/bin: {{ ansible_env.PATH }}"
  vars:
    # being absolutely explicit about what config to install
    configs:
      - zshrc
      - p10k.zsh
      - wezterm.lua
      - vscode-server
      - vscode
      - vimrc
    current_config: "{{ lookup('env', 'HOME') }}/.{{ item }}"
    source_config: "{{ playbook_dir | dirname }}/link_src/{{ item.item }}"
  tasks:
    - name: Adding artillery path (root of this repo) variable to zsh env
      ansible.builtin.blockinfile:
        path: "{{ lookup('env', 'HOME') ~ '/.zshenv' }}"
        create: true
        mode: 0644
        block: |
          export NONROOT_HOME={{ playbook_dir | dirname }}
          export NONROOT_PREFIX=$NONROOT_HOME/env
          export XDG_CACHE_HOME=$NONROOT_HOME/cache
          export PATH=$NONROOT_PREFIX/bin:$NONROOT_PREFIX/sbin:$PATH

    - name: Check if configs installed already
      ansible.builtin.stat:
        path: "{{ lookup('vars', 'current_config') }}"
      loop: "{{ vars['configs'] }}"
      register: config_check
      ignore_errors: true

    - name: Backing up current configs if not installed already
      ansible.builtin.command:
        mv -b "{{ item.invocation.module_args.path }}" "{{ item.invocation.module_args.path }}.bk"
      when: >
        (item.stat.exists and item.stat.lnk_source is not defined)
        or
        (item.stat.lnk_source is defined and item.stat.lnk_source != lookup('vars', 'source_config'))
      loop: "{{ config_check['results'] }}"

    # Considering using twpayne/chezmoi to manage dot files instead
    - name: Adding preferred config
      ansible.builtin.file:
        path: "{{ item.invocation.module_args.path }}"
        src: "{{ lookup('vars', 'source_config') }}"
        state: "link"
        mode: u=rwx,g=r,o=r
      when: >
        item.stat.lnk_source is not defined
        or
        item.stat.lnk_source != lookup('vars', 'source_config')
      loop: "{{ config_check['results'] }}"

- <<: *common_play
  name: Installing homebrew for linux as package manager, zplug as zsh manager
  tasks:
    # The git version of homebrew is designed for Mac
    # but it should work on Linux just fine
    - name: Git clone homebrew
      ansible.builtin.git:
        repo: "https://github.com/Homebrew/brew"
        dest: "{{ playbook_dir | dirname }}/env/homebrew"
        version: "master"
      notify: Setting up homebrew

    - name: Git clone zplug
      ansible.builtin.git:
        repo: "https://github.com/zplug/zplug.git"
        dest: "{{ playbook_dir | dirname }}/env/zplug"
        version: "master"

  handlers:
    - name: Setting up homebrew
      ansible.builtin.shell: >
        eval "$({{ playbook_dir | dirname }}/env/homebrew/bin/brew shellenv)";
        brew update --force --quiet;
        chmod -R go-w "$(brew --prefix)/share/zsh"

- <<: *common_play
  name: Installing straight forward software
  vars:
    brew:
      - htop
      - tmux
      - fzf
      - exa
      - autoconf
        # disabed because texinfo cannot compile
        #      - zsh
    appimage:
      - name: 'wezt'
        url: 'https://github.com/wez/wezterm/releases/download/nightly/WezTerm-nightly-Ubuntu18.04.AppImage'
      - name: 'nvim'
        url: 'https://github.com/neovim/neovim/releases/latest/download/nvim.appimage'
  tasks:
    - name: brew installs
      ansible.builtin.shell: >
        eval "$({{ playbook_dir | dirname }}/env/homebrew/bin/brew shellenv)"
        brew install {{ item }}
      loop: "{{ vars['brew'] }}"
      register: output
      changed_when: '"".join(output.stderr_lines).find("already installed") == -1'

    - name: git clone nerd fonts
      ansible.builtin.git:
        repo: "https://github.com/ryanoasis/nerd-fonts.git"
        dest: "{{ playbook_dir | dirname }}/env/fonts"
        depth: 1
        version: "master"

    - name: install Meslo fonts
      ansible.builtin.shell: >
        {{ playbook_dir | dirname }}/env/fonts/install.sh Meslo
      changed_when: 1

    - name: install fzf
      ansible.builtin.shell: >
        eval "$({{ playbook_dir | dirname }}/env/homebrew/bin/brew shellenv)";
        $(brew --prefix)/opt/fzf/install
      changed_when: 1

    - name: install appimages
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "{{ playbook_dir | dirname }}/env/bin/{{ item.name }}"
        mode: "u+rwx"
      loop: "{{ vars['appimage'] }}"

- <<: *common_play
  name: Installing compressed software
  vars:
    archives:
      - fname: 'code.tar.gz'
        rpath: 'code'
        url: 'https://code.visualstudio.com/sha/download?build=stable&os=linux-x64'
  tasks:
    - name: Downloading archives
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "{{ playbook_dir | dirname }}/env/{{ item.fname }}"
        mode: "u+rwx"
      loop: "{{ vars['archives'] }}"

    - name: Unzippping archives
      ansible.builtin.unarchive:
        src: "{{ playbook_dir | dirname }}/env/{{ item.fname }}"
        dest: "{{ playbook_dir | dirname }}/env"
        list_files: true
      loop: "{{ vars['archives'] }}"
      register: unzipped

    - name: linking
      ansible.builtin.file:
        path: "{{ playbook_dir | dirname }}/env/bin/{{ item.item.rpath | basename }}"
        src: "{{ playbook_dir | dirname }}/env/{{ item.files[0] | dirname }}/{{ item.item.rpath }}"
        state: "link"
        mode: u=rwx,g=r,o=r
      loop: "{{ unzipped['results'] }}"

- <<: *common_play
  name: Installing software needs manual compilation
  vars:
    repos:
      - rpath: 'zsh'
        url: 'https://github.com/zsh-users/zsh.git'
        version: 'master'
        cmd: './Util/preconfig && ./configure --prefix={{ playbook_dir | dirname }}/env && make -j8 && make install'
  tasks:
    - name: git clone repos
      ansible.builtin.git:
        repo: "{{ item.url }}"
        dest: "{{ playbook_dir | dirname }}/env/{{ item.rpath }}"
        version: "{{ item.version }}"
      loop: "{{ vars['repos'] }}"
      when: ansible_os_family != "Darwin"

    - name: make and install
      ansible.builtin.command:
        cmd: "{{ item.cmd }}"
        chdir: "{{ playbook_dir | dirname }}/env/{{ item.rpath }}"
      loop: "{{ lookup('vars', 'repos') }}"
      when: ansible_os_family != "Darwin"

    - name: check installation
      debug:
        msg: ok

# not using chsh command because it needs root
- <<: *common_play
  name: Setting up shell
  tasks:
    - name: Setting up bashrc
      vars:
        zsh_home: "{{ playbook_dir | dirname }}/env/bin/zsh"
      ansible.builtin.lineinfile:
        path: "{{ lookup('env', 'HOME') ~ '/.bashrc' }}"
        create: true
        mode: 0644
        line: "[ -f {{ lookup('vars', 'zsh_home') }} ] && exec {{ lookup('vars', 'zsh_home') }}"
